// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: oidb0x88d.proto

package oidb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GroupHeadPortraitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RptUint32PicId uint32 `protobuf:"varint,1,opt,name=rpt_uint32_pic_id,json=rptUint32PicId,proto3" json:"rpt_uint32_pic_id,omitempty"`
}

func (x *GroupHeadPortraitInfo) Reset() {
	*x = GroupHeadPortraitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x88d_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupHeadPortraitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupHeadPortraitInfo) ProtoMessage() {}

func (x *GroupHeadPortraitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x88d_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupHeadPortraitInfo.ProtoReflect.Descriptor instead.
func (*GroupHeadPortraitInfo) Descriptor() ([]byte, []int) {
	return file_oidb0x88d_proto_rawDescGZIP(), []int{0}
}

func (x *GroupHeadPortraitInfo) GetRptUint32PicId() uint32 {
	if x != nil {
		return x.RptUint32PicId
	}
	return 0
}

type GroupHeadPortrait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint32PicCnt           uint32                   `protobuf:"varint,1,opt,name=uint32_pic_cnt,json=uint32PicCnt,proto3" json:"uint32_pic_cnt,omitempty"`
	RptMsgInfo             []*GroupHeadPortraitInfo `protobuf:"bytes,2,rep,name=rpt_msg_info,json=rptMsgInfo,proto3" json:"rpt_msg_info,omitempty"`
	Uint32DefaultId        uint32                   `protobuf:"varint,3,opt,name=uint32_default_id,json=uint32DefaultId,proto3" json:"uint32_default_id,omitempty"`
	Uint32VerifyingPicCnt  uint32                   `protobuf:"varint,4,opt,name=uint32_verifying_pic_cnt,json=uint32VerifyingPicCnt,proto3" json:"uint32_verifying_pic_cnt,omitempty"`
	RptMsgVerifyingpicInfo []*GroupHeadPortraitInfo `protobuf:"bytes,5,rep,name=rpt_msg_verifyingpic_info,json=rptMsgVerifyingpicInfo,proto3" json:"rpt_msg_verifyingpic_info,omitempty"`
}

func (x *GroupHeadPortrait) Reset() {
	*x = GroupHeadPortrait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x88d_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupHeadPortrait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupHeadPortrait) ProtoMessage() {}

func (x *GroupHeadPortrait) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x88d_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupHeadPortrait.ProtoReflect.Descriptor instead.
func (*GroupHeadPortrait) Descriptor() ([]byte, []int) {
	return file_oidb0x88d_proto_rawDescGZIP(), []int{1}
}

func (x *GroupHeadPortrait) GetUint32PicCnt() uint32 {
	if x != nil {
		return x.Uint32PicCnt
	}
	return 0
}

func (x *GroupHeadPortrait) GetRptMsgInfo() []*GroupHeadPortraitInfo {
	if x != nil {
		return x.RptMsgInfo
	}
	return nil
}

func (x *GroupHeadPortrait) GetUint32DefaultId() uint32 {
	if x != nil {
		return x.Uint32DefaultId
	}
	return 0
}

func (x *GroupHeadPortrait) GetUint32VerifyingPicCnt() uint32 {
	if x != nil {
		return x.Uint32VerifyingPicCnt
	}
	return 0
}

func (x *GroupHeadPortrait) GetRptMsgVerifyingpicInfo() []*GroupHeadPortraitInfo {
	if x != nil {
		return x.RptMsgVerifyingpicInfo
	}
	return nil
}

type GroupExInfoOnly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint32TribeId          uint32 `protobuf:"varint,1,opt,name=uint32_tribe_id,json=uint32TribeId,proto3" json:"uint32_tribe_id,omitempty"`
	Uint32MoneyForAddGroup uint32 `protobuf:"varint,2,opt,name=uint32_money_for_add_group,json=uint32MoneyForAddGroup,proto3" json:"uint32_money_for_add_group,omitempty"`
}

func (x *GroupExInfoOnly) Reset() {
	*x = GroupExInfoOnly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x88d_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupExInfoOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupExInfoOnly) ProtoMessage() {}

func (x *GroupExInfoOnly) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x88d_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupExInfoOnly.ProtoReflect.Descriptor instead.
func (*GroupExInfoOnly) Descriptor() ([]byte, []int) {
	return file_oidb0x88d_proto_rawDescGZIP(), []int{2}
}

func (x *GroupExInfoOnly) GetUint32TribeId() uint32 {
	if x != nil {
		return x.Uint32TribeId
	}
	return 0
}

func (x *GroupExInfoOnly) GetUint32MoneyForAddGroup() uint32 {
	if x != nil {
		return x.Uint32MoneyForAddGroup
	}
	return 0
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint64GroupOwner              uint64             `protobuf:"varint,1,opt,name=uint64_group_owner,json=uint64GroupOwner,proto3" json:"uint64_group_owner,omitempty"`
	Uint32GroupCreateTime         uint32             `protobuf:"varint,2,opt,name=uint32_group_create_time,json=uint32GroupCreateTime,proto3" json:"uint32_group_create_time,omitempty"`
	Uint32GroupFlag               uint32             `protobuf:"varint,3,opt,name=uint32_group_flag,json=uint32GroupFlag,proto3" json:"uint32_group_flag,omitempty"`
	Uint32GroupFlagExt            uint32             `protobuf:"varint,4,opt,name=uint32_group_flag_ext,json=uint32GroupFlagExt,proto3" json:"uint32_group_flag_ext,omitempty"`
	Uint32GroupMemberMaxNum       uint32             `protobuf:"varint,5,opt,name=uint32_group_member_max_num,json=uint32GroupMemberMaxNum,proto3" json:"uint32_group_member_max_num,omitempty"`
	Uint32GroupMemberNum          uint32             `protobuf:"varint,6,opt,name=uint32_group_member_num,json=uint32GroupMemberNum,proto3" json:"uint32_group_member_num,omitempty"`
	Uint32GroupOption             uint32             `protobuf:"varint,7,opt,name=uint32_group_option,json=uint32GroupOption,proto3" json:"uint32_group_option,omitempty"`
	Uint32GroupClassExt           uint32             `protobuf:"varint,8,opt,name=uint32_group_class_ext,json=uint32GroupClassExt,proto3" json:"uint32_group_class_ext,omitempty"`
	Uint32GroupSpecialClass       uint32             `protobuf:"varint,9,opt,name=uint32_group_special_class,json=uint32GroupSpecialClass,proto3" json:"uint32_group_special_class,omitempty"`
	Uint32GroupLevel              uint32             `protobuf:"varint,10,opt,name=uint32_group_level,json=uint32GroupLevel,proto3" json:"uint32_group_level,omitempty"`
	Uint32GroupFace               uint32             `protobuf:"varint,11,opt,name=uint32_group_face,json=uint32GroupFace,proto3" json:"uint32_group_face,omitempty"`
	Uint32GroupDefaultPage        uint32             `protobuf:"varint,12,opt,name=uint32_group_default_page,json=uint32GroupDefaultPage,proto3" json:"uint32_group_default_page,omitempty"`
	Uint32GroupInfoSeq            uint32             `protobuf:"varint,13,opt,name=uint32_group_info_seq,json=uint32GroupInfoSeq,proto3" json:"uint32_group_info_seq,omitempty"`
	Uint32GroupRoamingTime        uint32             `protobuf:"varint,14,opt,name=uint32_group_roaming_time,json=uint32GroupRoamingTime,proto3" json:"uint32_group_roaming_time,omitempty"`
	StringGroupName               []byte             `protobuf:"bytes,15,opt,name=string_group_name,json=stringGroupName,proto3" json:"string_group_name,omitempty"`
	StringGroupMemo               []byte             `protobuf:"bytes,16,opt,name=string_group_memo,json=stringGroupMemo,proto3" json:"string_group_memo,omitempty"`
	StringGroupFingerMemo         []byte             `protobuf:"bytes,17,opt,name=string_group_finger_memo,json=stringGroupFingerMemo,proto3" json:"string_group_finger_memo,omitempty"`
	StringGroupClassText          []byte             `protobuf:"bytes,18,opt,name=string_group_class_text,json=stringGroupClassText,proto3" json:"string_group_class_text,omitempty"`
	Uint32GroupAllianceCode       []uint32           `protobuf:"varint,19,rep,packed,name=uint32_group_alliance_code,json=uint32GroupAllianceCode,proto3" json:"uint32_group_alliance_code,omitempty"`
	Uint32GroupExtraAdmNum        uint32             `protobuf:"varint,20,opt,name=uint32_group_extra_adm_num,json=uint32GroupExtraAdmNum,proto3" json:"uint32_group_extra_adm_num,omitempty"`
	Uint64GroupUin                uint64             `protobuf:"varint,21,opt,name=uint64_group_uin,json=uint64GroupUin,proto3" json:"uint64_group_uin,omitempty"`
	Uint32GroupCurMsgSeq          uint32             `protobuf:"varint,22,opt,name=uint32_group_cur_msg_seq,json=uint32GroupCurMsgSeq,proto3" json:"uint32_group_cur_msg_seq,omitempty"`
	Uint32GroupLastMsgTime        uint32             `protobuf:"varint,23,opt,name=uint32_group_last_msg_time,json=uint32GroupLastMsgTime,proto3" json:"uint32_group_last_msg_time,omitempty"`
	StringGroupQuestion           []byte             `protobuf:"bytes,24,opt,name=string_group_question,json=stringGroupQuestion,proto3" json:"string_group_question,omitempty"`
	StringGroupAnswer             []byte             `protobuf:"bytes,25,opt,name=string_group_answer,json=stringGroupAnswer,proto3" json:"string_group_answer,omitempty"`
	Uint32GroupVisitorMaxNum      uint32             `protobuf:"varint,26,opt,name=uint32_group_visitor_max_num,json=uint32GroupVisitorMaxNum,proto3" json:"uint32_group_visitor_max_num,omitempty"`
	Uint32GroupVisitorCurNum      uint32             `protobuf:"varint,27,opt,name=uint32_group_visitor_cur_num,json=uint32GroupVisitorCurNum,proto3" json:"uint32_group_visitor_cur_num,omitempty"`
	Uint32LevelNameSeq            uint32             `protobuf:"varint,28,opt,name=uint32_level_name_seq,json=uint32LevelNameSeq,proto3" json:"uint32_level_name_seq,omitempty"`
	Uint32GroupAdminMaxNum        uint32             `protobuf:"varint,29,opt,name=uint32_group_admin_max_num,json=uint32GroupAdminMaxNum,proto3" json:"uint32_group_admin_max_num,omitempty"`
	Uint32GroupAioSkinTimestamp   uint32             `protobuf:"varint,30,opt,name=uint32_group_aio_skin_timestamp,json=uint32GroupAioSkinTimestamp,proto3" json:"uint32_group_aio_skin_timestamp,omitempty"`
	Uint32GroupBoardSkinTimestamp uint32             `protobuf:"varint,31,opt,name=uint32_group_board_skin_timestamp,json=uint32GroupBoardSkinTimestamp,proto3" json:"uint32_group_board_skin_timestamp,omitempty"`
	StringGroupAioSkinUrl         []byte             `protobuf:"bytes,32,opt,name=string_group_aio_skin_url,json=stringGroupAioSkinUrl,proto3" json:"string_group_aio_skin_url,omitempty"`
	StringGroupBoardSkinUrl       []byte             `protobuf:"bytes,33,opt,name=string_group_board_skin_url,json=stringGroupBoardSkinUrl,proto3" json:"string_group_board_skin_url,omitempty"`
	Uint32GroupCoverSkinTimestamp uint32             `protobuf:"varint,34,opt,name=uint32_group_cover_skin_timestamp,json=uint32GroupCoverSkinTimestamp,proto3" json:"uint32_group_cover_skin_timestamp,omitempty"`
	StringGroupCoverSkinUrl       []byte             `protobuf:"bytes,35,opt,name=string_group_cover_skin_url,json=stringGroupCoverSkinUrl,proto3" json:"string_group_cover_skin_url,omitempty"`
	Uint32GroupGrade              uint32             `protobuf:"varint,36,opt,name=uint32_group_grade,json=uint32GroupGrade,proto3" json:"uint32_group_grade,omitempty"`
	Uint32ActiveMemberNum         uint32             `protobuf:"varint,37,opt,name=uint32_active_member_num,json=uint32ActiveMemberNum,proto3" json:"uint32_active_member_num,omitempty"`
	Uint32CertificationType       uint32             `protobuf:"varint,38,opt,name=uint32_certification_type,json=uint32CertificationType,proto3" json:"uint32_certification_type,omitempty"`
	StringCertificationText       []byte             `protobuf:"bytes,39,opt,name=string_certification_text,json=stringCertificationText,proto3" json:"string_certification_text,omitempty"`
	StringGroupRichFingerMemo     []byte             `protobuf:"bytes,40,opt,name=string_group_rich_finger_memo,json=stringGroupRichFingerMemo,proto3" json:"string_group_rich_finger_memo,omitempty"`
	RptTagRecord                  []*TagRecord       `protobuf:"bytes,41,rep,name=rpt_tag_record,json=rptTagRecord,proto3" json:"rpt_tag_record,omitempty"`
	GroupGeoInfo                  *GroupGeoInfo      `protobuf:"bytes,42,opt,name=group_geo_info,json=groupGeoInfo,proto3" json:"group_geo_info,omitempty"`
	Uint32HeadPortraitSeq         uint32             `protobuf:"varint,43,opt,name=uint32_head_portrait_seq,json=uint32HeadPortraitSeq,proto3" json:"uint32_head_portrait_seq,omitempty"`
	MsgHeadPortrait               *GroupHeadPortrait `protobuf:"bytes,44,opt,name=msg_head_portrait,json=msgHeadPortrait,proto3" json:"msg_head_portrait,omitempty"`
	Uint32ShutupTimestamp         uint32             `protobuf:"varint,45,opt,name=uint32_shutup_timestamp,json=uint32ShutupTimestamp,proto3" json:"uint32_shutup_timestamp,omitempty"`
	Uint32ShutupTimestampMe       uint32             `protobuf:"varint,46,opt,name=uint32_shutup_timestamp_me,json=uint32ShutupTimestampMe,proto3" json:"uint32_shutup_timestamp_me,omitempty"`
	Uint32CreateSourceFlag        uint32             `protobuf:"varint,47,opt,name=uint32_create_source_flag,json=uint32CreateSourceFlag,proto3" json:"uint32_create_source_flag,omitempty"`
	Uint32CmduinMsgSeq            uint32             `protobuf:"varint,48,opt,name=uint32_cmduin_msg_seq,json=uint32CmduinMsgSeq,proto3" json:"uint32_cmduin_msg_seq,omitempty"`
	Uint32CmduinJoinTime          uint32             `protobuf:"varint,49,opt,name=uint32_cmduin_join_time,json=uint32CmduinJoinTime,proto3" json:"uint32_cmduin_join_time,omitempty"`
	Uint32CmduinUinFlag           uint32             `protobuf:"varint,50,opt,name=uint32_cmduin_uin_flag,json=uint32CmduinUinFlag,proto3" json:"uint32_cmduin_uin_flag,omitempty"`
	Uint32CmduinFlagEx            uint32             `protobuf:"varint,51,opt,name=uint32_cmduin_flag_ex,json=uint32CmduinFlagEx,proto3" json:"uint32_cmduin_flag_ex,omitempty"`
	Uint32CmduinNewMobileFlag     uint32             `protobuf:"varint,52,opt,name=uint32_cmduin_new_mobile_flag,json=uint32CmduinNewMobileFlag,proto3" json:"uint32_cmduin_new_mobile_flag,omitempty"`
	Uint32CmduinReadMsgSeq        uint32             `protobuf:"varint,53,opt,name=uint32_cmduin_read_msg_seq,json=uint32CmduinReadMsgSeq,proto3" json:"uint32_cmduin_read_msg_seq,omitempty"`
	Uint32CmduinLastMsgTime       uint32             `protobuf:"varint,54,opt,name=uint32_cmduin_last_msg_time,json=uint32CmduinLastMsgTime,proto3" json:"uint32_cmduin_last_msg_time,omitempty"`
	Uint32GroupTypeFlag           uint32             `protobuf:"varint,55,opt,name=uint32_group_type_flag,json=uint32GroupTypeFlag,proto3" json:"uint32_group_type_flag,omitempty"`
	Uint32AppPrivilegeFlag        uint32             `protobuf:"varint,56,opt,name=uint32_app_privilege_flag,json=uint32AppPrivilegeFlag,proto3" json:"uint32_app_privilege_flag,omitempty"`
	StGroupExInfo                 *GroupExInfoOnly   `protobuf:"bytes,57,opt,name=st_group_ex_info,json=stGroupExInfo,proto3" json:"st_group_ex_info,omitempty"`
	Uint32GroupSecLevel           uint32             `protobuf:"varint,58,opt,name=uint32_group_sec_level,json=uint32GroupSecLevel,proto3" json:"uint32_group_sec_level,omitempty"`
	Uint32GroupSecLevelInfo       uint32             `protobuf:"varint,59,opt,name=uint32_group_sec_level_info,json=uint32GroupSecLevelInfo,proto3" json:"uint32_group_sec_level_info,omitempty"`
	Uint32CmduinPrivilege         uint32             `protobuf:"varint,60,opt,name=uint32_cmduin_privilege,json=uint32CmduinPrivilege,proto3" json:"uint32_cmduin_privilege,omitempty"`
	StringPoidInfo                []byte             `protobuf:"bytes,61,opt,name=string_poid_info,json=stringPoidInfo,proto3" json:"string_poid_info,omitempty"`
	Uint32CmduinFlagEx2           uint32             `protobuf:"varint,62,opt,name=uint32_cmduin_flag_ex2,json=uint32CmduinFlagEx2,proto3" json:"uint32_cmduin_flag_ex2,omitempty"`
	Uint64ConfUin                 uint64             `protobuf:"varint,63,opt,name=uint64_conf_uin,json=uint64ConfUin,proto3" json:"uint64_conf_uin,omitempty"`
	Uint32ConfMaxMsgSeq           uint32             `protobuf:"varint,64,opt,name=uint32_conf_max_msg_seq,json=uint32ConfMaxMsgSeq,proto3" json:"uint32_conf_max_msg_seq,omitempty"`
	Uint32ConfToGroupTime         uint32             `protobuf:"varint,65,opt,name=uint32_conf_to_group_time,json=uint32ConfToGroupTime,proto3" json:"uint32_conf_to_group_time,omitempty"`
	Uint32PasswordRedbagTime      uint32             `protobuf:"varint,66,opt,name=uint32_password_redbag_time,json=uint32PasswordRedbagTime,proto3" json:"uint32_password_redbag_time,omitempty"`
	Uint64SubscriptionUin         uint64             `protobuf:"varint,67,opt,name=uint64_subscription_uin,json=uint64SubscriptionUin,proto3" json:"uint64_subscription_uin,omitempty"`
	Uint32MemberListChangeSeq     uint32             `protobuf:"varint,68,opt,name=uint32_member_list_change_seq,json=uint32MemberListChangeSeq,proto3" json:"uint32_member_list_change_seq,omitempty"`
	Uint32MembercardSeq           uint32             `protobuf:"varint,69,opt,name=uint32_membercard_seq,json=uint32MembercardSeq,proto3" json:"uint32_membercard_seq,omitempty"`
	Uint64RootId                  uint64             `protobuf:"varint,70,opt,name=uint64_root_id,json=uint64RootId,proto3" json:"uint64_root_id,omitempty"`
	Uint64ParentId                uint64             `protobuf:"varint,71,opt,name=uint64_parent_id,json=uint64ParentId,proto3" json:"uint64_parent_id,omitempty"`
	Uint32TeamSeq                 uint32             `protobuf:"varint,72,opt,name=uint32_team_seq,json=uint32TeamSeq,proto3" json:"uint32_team_seq,omitempty"`
	Uint64HistoryMsgBeginTime     uint64             `protobuf:"varint,73,opt,name=uint64_history_msg_begin_time,json=uint64HistoryMsgBeginTime,proto3" json:"uint64_history_msg_begin_time,omitempty"`
	Uint64InviteNoAuthNumLimit    uint64             `protobuf:"varint,74,opt,name=uint64_invite_no_auth_num_limit,json=uint64InviteNoAuthNumLimit,proto3" json:"uint64_invite_no_auth_num_limit,omitempty"`
	Uint32CmduinHistoryMsgSeq     uint32             `protobuf:"varint,75,opt,name=uint32_cmduin_history_msg_seq,json=uint32CmduinHistoryMsgSeq,proto3" json:"uint32_cmduin_history_msg_seq,omitempty"`
	Uint32CmduinJoinMsgSeq        uint32             `protobuf:"varint,76,opt,name=uint32_cmduin_join_msg_seq,json=uint32CmduinJoinMsgSeq,proto3" json:"uint32_cmduin_join_msg_seq,omitempty"`
	Uint32GroupFlagext3           uint32             `protobuf:"varint,77,opt,name=uint32_group_flagext3,json=uint32GroupFlagext3,proto3" json:"uint32_group_flagext3,omitempty"`
	Uint32GroupOpenAppid          uint32             `protobuf:"varint,78,opt,name=uint32_group_open_appid,json=uint32GroupOpenAppid,proto3" json:"uint32_group_open_appid,omitempty"`
	Uint32IsConfGroup             uint32             `protobuf:"varint,79,opt,name=uint32_is_conf_group,json=uint32IsConfGroup,proto3" json:"uint32_is_conf_group,omitempty"`
	Uint32IsModifyConfGroupFace   uint32             `protobuf:"varint,80,opt,name=uint32_is_modify_conf_group_face,json=uint32IsModifyConfGroupFace,proto3" json:"uint32_is_modify_conf_group_face,omitempty"`
	Uint32IsModifyConfGroupName   uint32             `protobuf:"varint,81,opt,name=uint32_is_modify_conf_group_name,json=uint32IsModifyConfGroupName,proto3" json:"uint32_is_modify_conf_group_name,omitempty"`
	Uint32NoFingerOpenFlag        uint32             `protobuf:"varint,82,opt,name=uint32_no_finger_open_flag,json=uint32NoFingerOpenFlag,proto3" json:"uint32_no_finger_open_flag,omitempty"`
	Uint32NoCodeFingerOpenFlag    uint32             `protobuf:"varint,83,opt,name=uint32_no_code_finger_open_flag,json=uint32NoCodeFingerOpenFlag,proto3" json:"uint32_no_code_finger_open_flag,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x88d_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x88d_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_oidb0x88d_proto_rawDescGZIP(), []int{3}
}

func (x *GroupInfo) GetUint64GroupOwner() uint64 {
	if x != nil {
		return x.Uint64GroupOwner
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupCreateTime() uint32 {
	if x != nil {
		return x.Uint32GroupCreateTime
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupFlag() uint32 {
	if x != nil {
		return x.Uint32GroupFlag
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupFlagExt() uint32 {
	if x != nil {
		return x.Uint32GroupFlagExt
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupMemberMaxNum() uint32 {
	if x != nil {
		return x.Uint32GroupMemberMaxNum
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupMemberNum() uint32 {
	if x != nil {
		return x.Uint32GroupMemberNum
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupOption() uint32 {
	if x != nil {
		return x.Uint32GroupOption
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupClassExt() uint32 {
	if x != nil {
		return x.Uint32GroupClassExt
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupSpecialClass() uint32 {
	if x != nil {
		return x.Uint32GroupSpecialClass
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupLevel() uint32 {
	if x != nil {
		return x.Uint32GroupLevel
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupFace() uint32 {
	if x != nil {
		return x.Uint32GroupFace
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupDefaultPage() uint32 {
	if x != nil {
		return x.Uint32GroupDefaultPage
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupInfoSeq() uint32 {
	if x != nil {
		return x.Uint32GroupInfoSeq
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupRoamingTime() uint32 {
	if x != nil {
		return x.Uint32GroupRoamingTime
	}
	return 0
}

func (x *GroupInfo) GetStringGroupName() []byte {
	if x != nil {
		return x.StringGroupName
	}
	return nil
}

func (x *GroupInfo) GetStringGroupMemo() []byte {
	if x != nil {
		return x.StringGroupMemo
	}
	return nil
}

func (x *GroupInfo) GetStringGroupFingerMemo() []byte {
	if x != nil {
		return x.StringGroupFingerMemo
	}
	return nil
}

func (x *GroupInfo) GetStringGroupClassText() []byte {
	if x != nil {
		return x.StringGroupClassText
	}
	return nil
}

func (x *GroupInfo) GetUint32GroupAllianceCode() []uint32 {
	if x != nil {
		return x.Uint32GroupAllianceCode
	}
	return nil
}

func (x *GroupInfo) GetUint32GroupExtraAdmNum() uint32 {
	if x != nil {
		return x.Uint32GroupExtraAdmNum
	}
	return 0
}

func (x *GroupInfo) GetUint64GroupUin() uint64 {
	if x != nil {
		return x.Uint64GroupUin
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupCurMsgSeq() uint32 {
	if x != nil {
		return x.Uint32GroupCurMsgSeq
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupLastMsgTime() uint32 {
	if x != nil {
		return x.Uint32GroupLastMsgTime
	}
	return 0
}

func (x *GroupInfo) GetStringGroupQuestion() []byte {
	if x != nil {
		return x.StringGroupQuestion
	}
	return nil
}

func (x *GroupInfo) GetStringGroupAnswer() []byte {
	if x != nil {
		return x.StringGroupAnswer
	}
	return nil
}

func (x *GroupInfo) GetUint32GroupVisitorMaxNum() uint32 {
	if x != nil {
		return x.Uint32GroupVisitorMaxNum
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupVisitorCurNum() uint32 {
	if x != nil {
		return x.Uint32GroupVisitorCurNum
	}
	return 0
}

func (x *GroupInfo) GetUint32LevelNameSeq() uint32 {
	if x != nil {
		return x.Uint32LevelNameSeq
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupAdminMaxNum() uint32 {
	if x != nil {
		return x.Uint32GroupAdminMaxNum
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupAioSkinTimestamp() uint32 {
	if x != nil {
		return x.Uint32GroupAioSkinTimestamp
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupBoardSkinTimestamp() uint32 {
	if x != nil {
		return x.Uint32GroupBoardSkinTimestamp
	}
	return 0
}

func (x *GroupInfo) GetStringGroupAioSkinUrl() []byte {
	if x != nil {
		return x.StringGroupAioSkinUrl
	}
	return nil
}

func (x *GroupInfo) GetStringGroupBoardSkinUrl() []byte {
	if x != nil {
		return x.StringGroupBoardSkinUrl
	}
	return nil
}

func (x *GroupInfo) GetUint32GroupCoverSkinTimestamp() uint32 {
	if x != nil {
		return x.Uint32GroupCoverSkinTimestamp
	}
	return 0
}

func (x *GroupInfo) GetStringGroupCoverSkinUrl() []byte {
	if x != nil {
		return x.StringGroupCoverSkinUrl
	}
	return nil
}

func (x *GroupInfo) GetUint32GroupGrade() uint32 {
	if x != nil {
		return x.Uint32GroupGrade
	}
	return 0
}

func (x *GroupInfo) GetUint32ActiveMemberNum() uint32 {
	if x != nil {
		return x.Uint32ActiveMemberNum
	}
	return 0
}

func (x *GroupInfo) GetUint32CertificationType() uint32 {
	if x != nil {
		return x.Uint32CertificationType
	}
	return 0
}

func (x *GroupInfo) GetStringCertificationText() []byte {
	if x != nil {
		return x.StringCertificationText
	}
	return nil
}

func (x *GroupInfo) GetStringGroupRichFingerMemo() []byte {
	if x != nil {
		return x.StringGroupRichFingerMemo
	}
	return nil
}

func (x *GroupInfo) GetRptTagRecord() []*TagRecord {
	if x != nil {
		return x.RptTagRecord
	}
	return nil
}

func (x *GroupInfo) GetGroupGeoInfo() *GroupGeoInfo {
	if x != nil {
		return x.GroupGeoInfo
	}
	return nil
}

func (x *GroupInfo) GetUint32HeadPortraitSeq() uint32 {
	if x != nil {
		return x.Uint32HeadPortraitSeq
	}
	return 0
}

func (x *GroupInfo) GetMsgHeadPortrait() *GroupHeadPortrait {
	if x != nil {
		return x.MsgHeadPortrait
	}
	return nil
}

func (x *GroupInfo) GetUint32ShutupTimestamp() uint32 {
	if x != nil {
		return x.Uint32ShutupTimestamp
	}
	return 0
}

func (x *GroupInfo) GetUint32ShutupTimestampMe() uint32 {
	if x != nil {
		return x.Uint32ShutupTimestampMe
	}
	return 0
}

func (x *GroupInfo) GetUint32CreateSourceFlag() uint32 {
	if x != nil {
		return x.Uint32CreateSourceFlag
	}
	return 0
}

func (x *GroupInfo) GetUint32CmduinMsgSeq() uint32 {
	if x != nil {
		return x.Uint32CmduinMsgSeq
	}
	return 0
}

func (x *GroupInfo) GetUint32CmduinJoinTime() uint32 {
	if x != nil {
		return x.Uint32CmduinJoinTime
	}
	return 0
}

func (x *GroupInfo) GetUint32CmduinUinFlag() uint32 {
	if x != nil {
		return x.Uint32CmduinUinFlag
	}
	return 0
}

func (x *GroupInfo) GetUint32CmduinFlagEx() uint32 {
	if x != nil {
		return x.Uint32CmduinFlagEx
	}
	return 0
}

func (x *GroupInfo) GetUint32CmduinNewMobileFlag() uint32 {
	if x != nil {
		return x.Uint32CmduinNewMobileFlag
	}
	return 0
}

func (x *GroupInfo) GetUint32CmduinReadMsgSeq() uint32 {
	if x != nil {
		return x.Uint32CmduinReadMsgSeq
	}
	return 0
}

func (x *GroupInfo) GetUint32CmduinLastMsgTime() uint32 {
	if x != nil {
		return x.Uint32CmduinLastMsgTime
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupTypeFlag() uint32 {
	if x != nil {
		return x.Uint32GroupTypeFlag
	}
	return 0
}

func (x *GroupInfo) GetUint32AppPrivilegeFlag() uint32 {
	if x != nil {
		return x.Uint32AppPrivilegeFlag
	}
	return 0
}

func (x *GroupInfo) GetStGroupExInfo() *GroupExInfoOnly {
	if x != nil {
		return x.StGroupExInfo
	}
	return nil
}

func (x *GroupInfo) GetUint32GroupSecLevel() uint32 {
	if x != nil {
		return x.Uint32GroupSecLevel
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupSecLevelInfo() uint32 {
	if x != nil {
		return x.Uint32GroupSecLevelInfo
	}
	return 0
}

func (x *GroupInfo) GetUint32CmduinPrivilege() uint32 {
	if x != nil {
		return x.Uint32CmduinPrivilege
	}
	return 0
}

func (x *GroupInfo) GetStringPoidInfo() []byte {
	if x != nil {
		return x.StringPoidInfo
	}
	return nil
}

func (x *GroupInfo) GetUint32CmduinFlagEx2() uint32 {
	if x != nil {
		return x.Uint32CmduinFlagEx2
	}
	return 0
}

func (x *GroupInfo) GetUint64ConfUin() uint64 {
	if x != nil {
		return x.Uint64ConfUin
	}
	return 0
}

func (x *GroupInfo) GetUint32ConfMaxMsgSeq() uint32 {
	if x != nil {
		return x.Uint32ConfMaxMsgSeq
	}
	return 0
}

func (x *GroupInfo) GetUint32ConfToGroupTime() uint32 {
	if x != nil {
		return x.Uint32ConfToGroupTime
	}
	return 0
}

func (x *GroupInfo) GetUint32PasswordRedbagTime() uint32 {
	if x != nil {
		return x.Uint32PasswordRedbagTime
	}
	return 0
}

func (x *GroupInfo) GetUint64SubscriptionUin() uint64 {
	if x != nil {
		return x.Uint64SubscriptionUin
	}
	return 0
}

func (x *GroupInfo) GetUint32MemberListChangeSeq() uint32 {
	if x != nil {
		return x.Uint32MemberListChangeSeq
	}
	return 0
}

func (x *GroupInfo) GetUint32MembercardSeq() uint32 {
	if x != nil {
		return x.Uint32MembercardSeq
	}
	return 0
}

func (x *GroupInfo) GetUint64RootId() uint64 {
	if x != nil {
		return x.Uint64RootId
	}
	return 0
}

func (x *GroupInfo) GetUint64ParentId() uint64 {
	if x != nil {
		return x.Uint64ParentId
	}
	return 0
}

func (x *GroupInfo) GetUint32TeamSeq() uint32 {
	if x != nil {
		return x.Uint32TeamSeq
	}
	return 0
}

func (x *GroupInfo) GetUint64HistoryMsgBeginTime() uint64 {
	if x != nil {
		return x.Uint64HistoryMsgBeginTime
	}
	return 0
}

func (x *GroupInfo) GetUint64InviteNoAuthNumLimit() uint64 {
	if x != nil {
		return x.Uint64InviteNoAuthNumLimit
	}
	return 0
}

func (x *GroupInfo) GetUint32CmduinHistoryMsgSeq() uint32 {
	if x != nil {
		return x.Uint32CmduinHistoryMsgSeq
	}
	return 0
}

func (x *GroupInfo) GetUint32CmduinJoinMsgSeq() uint32 {
	if x != nil {
		return x.Uint32CmduinJoinMsgSeq
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupFlagext3() uint32 {
	if x != nil {
		return x.Uint32GroupFlagext3
	}
	return 0
}

func (x *GroupInfo) GetUint32GroupOpenAppid() uint32 {
	if x != nil {
		return x.Uint32GroupOpenAppid
	}
	return 0
}

func (x *GroupInfo) GetUint32IsConfGroup() uint32 {
	if x != nil {
		return x.Uint32IsConfGroup
	}
	return 0
}

func (x *GroupInfo) GetUint32IsModifyConfGroupFace() uint32 {
	if x != nil {
		return x.Uint32IsModifyConfGroupFace
	}
	return 0
}

func (x *GroupInfo) GetUint32IsModifyConfGroupName() uint32 {
	if x != nil {
		return x.Uint32IsModifyConfGroupName
	}
	return 0
}

func (x *GroupInfo) GetUint32NoFingerOpenFlag() uint32 {
	if x != nil {
		return x.Uint32NoFingerOpenFlag
	}
	return 0
}

func (x *GroupInfo) GetUint32NoCodeFingerOpenFlag() uint32 {
	if x != nil {
		return x.Uint32NoCodeFingerOpenFlag
	}
	return 0
}

type ReqGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint64GroupCode            uint64     `protobuf:"varint,1,opt,name=uint64_group_code,json=uint64GroupCode,proto3" json:"uint64_group_code,omitempty"`
	Stgroupinfo                *GroupInfo `protobuf:"bytes,2,opt,name=stgroupinfo,proto3" json:"stgroupinfo,omitempty"`
	Uint32LastGetGroupNameTime uint32     `protobuf:"varint,3,opt,name=uint32_last_get_group_name_time,json=uint32LastGetGroupNameTime,proto3" json:"uint32_last_get_group_name_time,omitempty"`
}

func (x *ReqGroupInfo) Reset() {
	*x = ReqGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x88d_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGroupInfo) ProtoMessage() {}

func (x *ReqGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x88d_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGroupInfo.ProtoReflect.Descriptor instead.
func (*ReqGroupInfo) Descriptor() ([]byte, []int) {
	return file_oidb0x88d_proto_rawDescGZIP(), []int{4}
}

func (x *ReqGroupInfo) GetUint64GroupCode() uint64 {
	if x != nil {
		return x.Uint64GroupCode
	}
	return 0
}

func (x *ReqGroupInfo) GetStgroupinfo() *GroupInfo {
	if x != nil {
		return x.Stgroupinfo
	}
	return nil
}

func (x *ReqGroupInfo) GetUint32LastGetGroupNameTime() uint32 {
	if x != nil {
		return x.Uint32LastGetGroupNameTime
	}
	return 0
}

type ReqBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint32Appid           uint32          `protobuf:"varint,1,opt,name=uint32_appid,json=uint32Appid,proto3" json:"uint32_appid,omitempty"`
	Stzreqgroupinfo       []*ReqGroupInfo `protobuf:"bytes,2,rep,name=stzreqgroupinfo,proto3" json:"stzreqgroupinfo,omitempty"`
	Uint32PcClientVersion uint32          `protobuf:"varint,3,opt,name=uint32_pc_client_version,json=uint32PcClientVersion,proto3" json:"uint32_pc_client_version,omitempty"`
}

func (x *ReqBody) Reset() {
	*x = ReqBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x88d_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBody) ProtoMessage() {}

func (x *ReqBody) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x88d_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBody.ProtoReflect.Descriptor instead.
func (*ReqBody) Descriptor() ([]byte, []int) {
	return file_oidb0x88d_proto_rawDescGZIP(), []int{5}
}

func (x *ReqBody) GetUint32Appid() uint32 {
	if x != nil {
		return x.Uint32Appid
	}
	return 0
}

func (x *ReqBody) GetStzreqgroupinfo() []*ReqGroupInfo {
	if x != nil {
		return x.Stzreqgroupinfo
	}
	return nil
}

func (x *ReqBody) GetUint32PcClientVersion() uint32 {
	if x != nil {
		return x.Uint32PcClientVersion
	}
	return 0
}

type RspGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint64GroupCode uint64     `protobuf:"varint,1,opt,name=uint64_group_code,json=uint64GroupCode,proto3" json:"uint64_group_code,omitempty"`
	Uint32Result    uint32     `protobuf:"varint,2,opt,name=uint32_result,json=uint32Result,proto3" json:"uint32_result,omitempty"`
	Stgroupinfo     *GroupInfo `protobuf:"bytes,3,opt,name=stgroupinfo,proto3" json:"stgroupinfo,omitempty"`
}

func (x *RspGroupInfo) Reset() {
	*x = RspGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x88d_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGroupInfo) ProtoMessage() {}

func (x *RspGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x88d_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGroupInfo.ProtoReflect.Descriptor instead.
func (*RspGroupInfo) Descriptor() ([]byte, []int) {
	return file_oidb0x88d_proto_rawDescGZIP(), []int{6}
}

func (x *RspGroupInfo) GetUint64GroupCode() uint64 {
	if x != nil {
		return x.Uint64GroupCode
	}
	return 0
}

func (x *RspGroupInfo) GetUint32Result() uint32 {
	if x != nil {
		return x.Uint32Result
	}
	return 0
}

func (x *RspGroupInfo) GetStgroupinfo() *GroupInfo {
	if x != nil {
		return x.Stgroupinfo
	}
	return nil
}

type RspBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stzrspgroupinfo []*RspGroupInfo `protobuf:"bytes,1,rep,name=stzrspgroupinfo,proto3" json:"stzrspgroupinfo,omitempty"`
	StrErrorinfo    []byte          `protobuf:"bytes,2,opt,name=str_errorinfo,json=strErrorinfo,proto3" json:"str_errorinfo,omitempty"`
}

func (x *RspBody) Reset() {
	*x = RspBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x88d_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBody) ProtoMessage() {}

func (x *RspBody) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x88d_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBody.ProtoReflect.Descriptor instead.
func (*RspBody) Descriptor() ([]byte, []int) {
	return file_oidb0x88d_proto_rawDescGZIP(), []int{7}
}

func (x *RspBody) GetStzrspgroupinfo() []*RspGroupInfo {
	if x != nil {
		return x.Stzrspgroupinfo
	}
	return nil
}

func (x *RspBody) GetStrErrorinfo() []byte {
	if x != nil {
		return x.StrErrorinfo
	}
	return nil
}

type TagRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint64FromUin   uint64 `protobuf:"varint,1,opt,name=uint64_from_uin,json=uint64FromUin,proto3" json:"uint64_from_uin,omitempty"`
	Uint64GroupCode uint64 `protobuf:"varint,2,opt,name=uint64_group_code,json=uint64GroupCode,proto3" json:"uint64_group_code,omitempty"`
	BytesTagId      []byte `protobuf:"bytes,3,opt,name=bytes_tag_id,json=bytesTagId,proto3" json:"bytes_tag_id,omitempty"`
	Uint64SetTime   uint64 `protobuf:"varint,4,opt,name=uint64_set_time,json=uint64SetTime,proto3" json:"uint64_set_time,omitempty"`
	Uint32GoodNum   uint32 `protobuf:"varint,5,opt,name=uint32_good_num,json=uint32GoodNum,proto3" json:"uint32_good_num,omitempty"`
	Uint32BadNum    uint32 `protobuf:"varint,6,opt,name=uint32_bad_num,json=uint32BadNum,proto3" json:"uint32_bad_num,omitempty"`
	Uint32TagLen    uint32 `protobuf:"varint,7,opt,name=uint32_tag_len,json=uint32TagLen,proto3" json:"uint32_tag_len,omitempty"`
	BytesTagValue   []byte `protobuf:"bytes,8,opt,name=bytes_tag_value,json=bytesTagValue,proto3" json:"bytes_tag_value,omitempty"`
}

func (x *TagRecord) Reset() {
	*x = TagRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x88d_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagRecord) ProtoMessage() {}

func (x *TagRecord) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x88d_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagRecord.ProtoReflect.Descriptor instead.
func (*TagRecord) Descriptor() ([]byte, []int) {
	return file_oidb0x88d_proto_rawDescGZIP(), []int{8}
}

func (x *TagRecord) GetUint64FromUin() uint64 {
	if x != nil {
		return x.Uint64FromUin
	}
	return 0
}

func (x *TagRecord) GetUint64GroupCode() uint64 {
	if x != nil {
		return x.Uint64GroupCode
	}
	return 0
}

func (x *TagRecord) GetBytesTagId() []byte {
	if x != nil {
		return x.BytesTagId
	}
	return nil
}

func (x *TagRecord) GetUint64SetTime() uint64 {
	if x != nil {
		return x.Uint64SetTime
	}
	return 0
}

func (x *TagRecord) GetUint32GoodNum() uint32 {
	if x != nil {
		return x.Uint32GoodNum
	}
	return 0
}

func (x *TagRecord) GetUint32BadNum() uint32 {
	if x != nil {
		return x.Uint32BadNum
	}
	return 0
}

func (x *TagRecord) GetUint32TagLen() uint32 {
	if x != nil {
		return x.Uint32TagLen
	}
	return 0
}

func (x *TagRecord) GetBytesTagValue() []byte {
	if x != nil {
		return x.BytesTagValue
	}
	return nil
}

type GroupGeoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint64Owneruin  uint64 `protobuf:"varint,1,opt,name=uint64_owneruin,json=uint64Owneruin,proto3" json:"uint64_owneruin,omitempty"`
	Uint32Settime   uint32 `protobuf:"varint,2,opt,name=uint32_settime,json=uint32Settime,proto3" json:"uint32_settime,omitempty"`
	Uint32Cityid    uint32 `protobuf:"varint,3,opt,name=uint32_cityid,json=uint32Cityid,proto3" json:"uint32_cityid,omitempty"`
	Int64Longitude  int64  `protobuf:"varint,4,opt,name=int64_longitude,json=int64Longitude,proto3" json:"int64_longitude,omitempty"`
	Int64Latitude   int64  `protobuf:"varint,5,opt,name=int64_latitude,json=int64Latitude,proto3" json:"int64_latitude,omitempty"`
	BytesGeocontent []byte `protobuf:"bytes,6,opt,name=bytes_geocontent,json=bytesGeocontent,proto3" json:"bytes_geocontent,omitempty"`
	Uint64PoiId     uint64 `protobuf:"varint,7,opt,name=uint64_poi_id,json=uint64PoiId,proto3" json:"uint64_poi_id,omitempty"`
}

func (x *GroupGeoInfo) Reset() {
	*x = GroupGeoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x88d_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupGeoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupGeoInfo) ProtoMessage() {}

func (x *GroupGeoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x88d_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupGeoInfo.ProtoReflect.Descriptor instead.
func (*GroupGeoInfo) Descriptor() ([]byte, []int) {
	return file_oidb0x88d_proto_rawDescGZIP(), []int{9}
}

func (x *GroupGeoInfo) GetUint64Owneruin() uint64 {
	if x != nil {
		return x.Uint64Owneruin
	}
	return 0
}

func (x *GroupGeoInfo) GetUint32Settime() uint32 {
	if x != nil {
		return x.Uint32Settime
	}
	return 0
}

func (x *GroupGeoInfo) GetUint32Cityid() uint32 {
	if x != nil {
		return x.Uint32Cityid
	}
	return 0
}

func (x *GroupGeoInfo) GetInt64Longitude() int64 {
	if x != nil {
		return x.Int64Longitude
	}
	return 0
}

func (x *GroupGeoInfo) GetInt64Latitude() int64 {
	if x != nil {
		return x.Int64Latitude
	}
	return 0
}

func (x *GroupGeoInfo) GetBytesGeocontent() []byte {
	if x != nil {
		return x.BytesGeocontent
	}
	return nil
}

func (x *GroupGeoInfo) GetUint64PoiId() uint64 {
	if x != nil {
		return x.Uint64PoiId
	}
	return 0
}

var File_oidb0x88d_proto protoreflect.FileDescriptor

var file_oidb0x88d_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x38, 0x38, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x38, 0x38, 0x64, 0x22, 0x42, 0x0a, 0x15,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x72, 0x70, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x69, 0x63, 0x49, 0x64,
	0x22, 0xbf, 0x02, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x69, 0x63, 0x43, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0c,
	0x72, 0x70, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x38, 0x38, 0x64, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x70, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50,
	0x69, 0x63, 0x43, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x19, 0x72, 0x70, 0x74, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x69, 0x64, 0x62, 0x30,
	0x78, 0x38, 0x38, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x72, 0x70, 0x74, 0x4d,
	0x73, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x75, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x74, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x1a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xf6, 0x24, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x78, 0x74, 0x12, 0x3c, 0x0a,
	0x1b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x17, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x45, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x61, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x19,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x12,
	0x37, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x3b, 0x0a, 0x1a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x17, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x1a,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x61, 0x64, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x64, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x69, 0x6e, 0x12, 0x36, 0x0a, 0x18, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x75, 0x72, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x1a, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x1c, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x12, 0x3a, 0x0a,
	0x1a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x1f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x69, 0x6f, 0x5f, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x69, 0x6f, 0x53, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x48, 0x0a, 0x21, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x69, 0x6f, 0x5f, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x69, 0x6f, 0x53, 0x6b, 0x69, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x48, 0x0a, 0x21, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x6b,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x1b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x17, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x53, 0x6b, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x3a, 0x0a, 0x19, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x19,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x17, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x19, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x69, 0x63, 0x68,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x70,
	0x74, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x29, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x38, 0x38, 0x64, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x72, 0x70, 0x74, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x67, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x38, 0x38, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x47, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x65,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65,
	0x71, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48,
	0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x53, 0x65, 0x71, 0x12, 0x48,
	0x0a, 0x11, 0x6d, 0x73, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x69, 0x64, 0x62,
	0x30, 0x78, 0x38, 0x38, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x65, 0x61, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x68, 0x75, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x75,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x65, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x68, 0x75, 0x74,
	0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x63, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65,
	0x71, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43,
	0x6d, 0x64, 0x75, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x17, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x43, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6d, 0x64,
	0x75, 0x69, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6d, 0x64, 0x75, 0x69, 0x6e,
	0x55, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x63, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x65, 0x78,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6d,
	0x64, 0x75, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x78, 0x12, 0x40, 0x0a, 0x1d, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x4e,
	0x65, 0x77, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x1a,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x1b, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x63, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x19, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x38, 0x38, 0x64, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x0d, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3c, 0x0a, 0x1b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x65, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36,
	0x0a, 0x17, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x33, 0x0a, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6d, 0x64, 0x75, 0x69,
	0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x65, 0x78, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x45, 0x78, 0x32, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x55, 0x69, 0x6e, 0x12, 0x34, 0x0a,
	0x17, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x19, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f,
	0x6e, 0x66, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x1b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x64, 0x62, 0x61, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x64, 0x62, 0x61, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x65, 0x71, 0x12, 0x40, 0x0a, 0x1d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x41, 0x75, 0x74,
	0x68, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x63, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x1a, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6d, 0x64, 0x75, 0x69, 0x6e, 0x4a, 0x6f, 0x69,
	0x6e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x65, 0x78, 0x74, 0x33,
	0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x65, 0x78, 0x74, 0x33, 0x12, 0x35, 0x0a, 0x17, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x45, 0x0a, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x61, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x73, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x5f, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x6f, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x43, 0x0a,
	0x1f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x0b, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x38, 0x38, 0x64,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x1f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x73,
	0x74, 0x7a, 0x72, 0x65, 0x71, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x38, 0x38, 0x64,
	0x2e, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73,
	0x74, 0x7a, 0x72, 0x65, 0x71, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x37,
	0x0a, 0x18, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x70, 0x63, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x38, 0x38, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x71, 0x0a, 0x07, 0x52, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0f,
	0x73, 0x74, 0x7a, 0x72, 0x73, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x38, 0x38,
	0x64, 0x2e, 0x52, 0x73, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x73, 0x74, 0x7a, 0x72, 0x73, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc5, 0x02, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x24,
	0x0a, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x61,
	0x67, 0x4c, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x02, 0x0a,
	0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a,
	0x0f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x75, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x75, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x69, 0x74, 0x79,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x6f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x47, 0x65, 0x6f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x70, 0x6f, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x6f, 0x69, 0x49,
	0x64, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x6f, 0x69, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_oidb0x88d_proto_rawDescOnce sync.Once
	file_oidb0x88d_proto_rawDescData = file_oidb0x88d_proto_rawDesc
)

func file_oidb0x88d_proto_rawDescGZIP() []byte {
	file_oidb0x88d_proto_rawDescOnce.Do(func() {
		file_oidb0x88d_proto_rawDescData = protoimpl.X.CompressGZIP(file_oidb0x88d_proto_rawDescData)
	})
	return file_oidb0x88d_proto_rawDescData
}

var file_oidb0x88d_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_oidb0x88d_proto_goTypes = []interface{}{
	(*GroupHeadPortraitInfo)(nil), // 0: oidb0x88d.GroupHeadPortraitInfo
	(*GroupHeadPortrait)(nil),     // 1: oidb0x88d.GroupHeadPortrait
	(*GroupExInfoOnly)(nil),       // 2: oidb0x88d.GroupExInfoOnly
	(*GroupInfo)(nil),             // 3: oidb0x88d.GroupInfo
	(*ReqGroupInfo)(nil),          // 4: oidb0x88d.ReqGroupInfo
	(*ReqBody)(nil),               // 5: oidb0x88d.ReqBody
	(*RspGroupInfo)(nil),          // 6: oidb0x88d.RspGroupInfo
	(*RspBody)(nil),               // 7: oidb0x88d.RspBody
	(*TagRecord)(nil),             // 8: oidb0x88d.TagRecord
	(*GroupGeoInfo)(nil),          // 9: oidb0x88d.GroupGeoInfo
}
var file_oidb0x88d_proto_depIdxs = []int32{
	0,  // 0: oidb0x88d.GroupHeadPortrait.rpt_msg_info:type_name -> oidb0x88d.GroupHeadPortraitInfo
	0,  // 1: oidb0x88d.GroupHeadPortrait.rpt_msg_verifyingpic_info:type_name -> oidb0x88d.GroupHeadPortraitInfo
	8,  // 2: oidb0x88d.GroupInfo.rpt_tag_record:type_name -> oidb0x88d.TagRecord
	9,  // 3: oidb0x88d.GroupInfo.group_geo_info:type_name -> oidb0x88d.GroupGeoInfo
	1,  // 4: oidb0x88d.GroupInfo.msg_head_portrait:type_name -> oidb0x88d.GroupHeadPortrait
	2,  // 5: oidb0x88d.GroupInfo.st_group_ex_info:type_name -> oidb0x88d.GroupExInfoOnly
	3,  // 6: oidb0x88d.ReqGroupInfo.stgroupinfo:type_name -> oidb0x88d.GroupInfo
	4,  // 7: oidb0x88d.ReqBody.stzreqgroupinfo:type_name -> oidb0x88d.ReqGroupInfo
	3,  // 8: oidb0x88d.RspGroupInfo.stgroupinfo:type_name -> oidb0x88d.GroupInfo
	6,  // 9: oidb0x88d.RspBody.stzrspgroupinfo:type_name -> oidb0x88d.RspGroupInfo
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_oidb0x88d_proto_init() }
func file_oidb0x88d_proto_init() {
	if File_oidb0x88d_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_oidb0x88d_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupHeadPortraitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x88d_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupHeadPortrait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x88d_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupExInfoOnly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x88d_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x88d_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x88d_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x88d_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x88d_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x88d_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x88d_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupGeoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_oidb0x88d_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_oidb0x88d_proto_goTypes,
		DependencyIndexes: file_oidb0x88d_proto_depIdxs,
		MessageInfos:      file_oidb0x88d_proto_msgTypes,
	}.Build()
	File_oidb0x88d_proto = out.File
	file_oidb0x88d_proto_rawDesc = nil
	file_oidb0x88d_proto_goTypes = nil
	file_oidb0x88d_proto_depIdxs = nil
}
